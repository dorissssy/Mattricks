; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main(i32 %x) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %int_var = alloca i32
  store i32 3, i32* %int_var
  %f_var = alloca double
  store double 4.000000e+00, double* %f_var
  %bool_var = alloca i1
  store i1 true, i1* %bool_var
  %tmp = alloca [12 x double], i32 6454
  %tmp2 = alloca [12 x double], i32 6454
  %tmp3 = alloca [12 x double], i32 6454
  %tmp4 = alloca [3 x i32], i32 0
  %int_var5 = load i32, i32* %int_var
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %int_var5)
  %f_var6 = load double, double* %f_var
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %f_var6)
  %bool_var8 = load i1, i1* %bool_var
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %bool_var8)
  %tmp10 = getelementptr [12 x double], [12 x double]* %tmp, i32 1, i32 1
  store double 1.000000e+00, double* %tmp10
  %tmp11 = getelementptr [12 x double], [12 x double]* %tmp, i32 1, i32 2
  store double 2.000000e+00, double* %tmp11
  %tmp12 = getelementptr [12 x double], [12 x double]* %tmp, i32 1, i32 3
  store double 3.000000e+00, double* %tmp12
  %tmp13 = getelementptr [12 x double], [12 x double]* %tmp2, i32 2, i32 3
  store double 7.000000e+00, double* %tmp13
  %tmp14 = getelementptr [12 x double], [12 x double]* %tmp, i32 1, i32 1
  %tmp15 = load double, double* %tmp14
  %printf16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %tmp15)
  %tmp17 = getelementptr [12 x double], [12 x double]* %tmp2, i32 2, i32 3
  %tmp18 = load double, double* %tmp17
  %printf19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %tmp18)
  %tmp20 = getelementptr [3 x i32], [3 x i32]* %tmp4, i32 0, i32 1
  store i32 1, i32* %tmp20
  %tmp21 = getelementptr [3 x i32], [3 x i32]* %tmp4, i32 0, i32 2
  store i32 2, i32* %tmp21
  %tmp22 = getelementptr [3 x i32], [3 x i32]* %tmp4, i32 0, i32 1
  %tmp23 = load i32, i32* %tmp22
  %tmp24 = getelementptr [3 x i32], [3 x i32]* %tmp4, i32 0, i32 2
  %tmp25 = load i32, i32* %tmp24
  %tmp26 = add i32 %tmp23, %tmp25
  %printf27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %tmp26)
  %tmp28 = getelementptr [3 x i32], [3 x i32]* %tmp4, i32 0, i32 1
  %tmp29 = load i32, i32* %tmp28
  %printf30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %tmp29)
  %tmp31 = getelementptr [3 x i32], [3 x i32]* %tmp4, i32 0, i32 2
  %tmp32 = load i32, i32* %tmp31
  %printf33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %tmp32)
  ret i32 0
}
