; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i32 @printf(i8*, ...)

define [4 x i32] @m([4 x i32] %m) {
entry:
  %m1 = alloca [4 x i32]
  store [4 x i32] %m, [4 x i32]* %m1
  %tmp = getelementptr [4 x i32], [4 x i32]* %m1, i32 0, i32 0
  %tmp2 = load i32, i32* %tmp
  %tmp3 = add i32 %tmp2, 1
  %tmp4 = getelementptr [4 x i32], [4 x i32]* %m1, i32 0, i32 0
  store i32 %tmp3, i32* %tmp4
  %tmp5 = getelementptr [4 x i32], [4 x i32]* %m1, i32 0, i32 0
  %tmp6 = load i32, i32* %tmp5
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %tmp6)
  %m7 = load [4 x i32], [4 x i32]* %m1
  ret [4 x i32] %m7
}

define i32 @main(i32 %x) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %a = alloca i32
  store i32 3, i32* %a
  %f = alloca double
  store double 3.333330e+00, double* %f
  %f2 = load double, double* %f
  %tmp = fadd double %f2, 1.000000e-01
  store double %tmp, double* %f
  %f3 = load double, double* %f
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), double %f3)
  %tmp4 = alloca [12 x double], i32 6454
  %tmp5 = alloca [12 x double], i32 6454
  %tmp6 = getelementptr [12 x double], [12 x double]* %tmp4, i32 1, i32 1
  store double 1.000000e+00, double* %tmp6
  %tmp7 = getelementptr [12 x double], [12 x double]* %tmp4, i32 1, i32 2
  store double 2.000000e+00, double* %tmp7
  %tmp8 = getelementptr [12 x double], [12 x double]* %tmp4, i32 1, i32 3
  store double 3.000000e+00, double* %tmp8
  %tmp9 = getelementptr [12 x double], [12 x double]* %tmp4, i32 2, i32 3
  store double 4.000000e+00, double* %tmp9
  %tmp10 = getelementptr [12 x double], [12 x double]* %tmp5, i32 2, i32 3
  store double 5.000000e+00, double* %tmp10
  %tmp11 = getelementptr [12 x double], [12 x double]* %tmp4, i32 1, i32 1
  %tmp12 = load double, double* %tmp11
  %printf13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), double %tmp12)
  %tmp14 = getelementptr [12 x double], [12 x double]* %tmp4, i32 1, i32 2
  %tmp15 = load double, double* %tmp14
  %printf16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), double %tmp15)
  %tmp17 = getelementptr [12 x double], [12 x double]* %tmp4, i32 1, i32 3
  %tmp18 = load double, double* %tmp17
  %printf19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), double %tmp18)
  %tmp20 = getelementptr [12 x double], [12 x double]* %tmp4, i32 2, i32 3
  %tmp21 = load double, double* %tmp20
  %printf22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), double %tmp21)
  %tmp23 = getelementptr [12 x double], [12 x double]* %tmp5, i32 2, i32 3
  %tmp24 = load double, double* %tmp23
  %printf25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), double %tmp24)
  %tmp26 = getelementptr [12 x double], [12 x double]* %tmp4, i32 1, i32 1
  %tmp27 = load double, double* %tmp26
  %printf28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), double %tmp27)
  ret i32 0
}
