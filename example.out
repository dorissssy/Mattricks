; ModuleID = 'MicroC'
source_filename = "MicroC"

@i = global i32 0
@v1 = global i32 0
@v2 = global i32 0
@j = global i32 0
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.7 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.8 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.9 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.11 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.12 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.13 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.14 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.15 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i32 @printf(i8*, ...)

define [4 x i32] @m([4 x i32] %m) {
entry:
  %m1 = alloca [4 x i32], align 4
  store [4 x i32] %m, [4 x i32]* %m1, align 4
  %tmp = getelementptr [4 x i32], [4 x i32]* %m1, i32 0, i32 0
  %tmp2 = load i32, i32* %tmp, align 4
  %tmp3 = add i32 %tmp2, 1
  %tmp4 = getelementptr [4 x i32], [4 x i32]* %m1, i32 0, i32 0
  store i32 %tmp3, i32* %tmp4, align 4
  %tmp5 = getelementptr [4 x i32], [4 x i32]* %m1, i32 0, i32 0
  %tmp6 = load i32, i32* %tmp5, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %tmp6)
  %m7 = load [4 x i32], [4 x i32]* %m1, align 4
  ret [4 x i32] %m7
}

define [10 x i32] @init_val_1d_int_10([10 x i32] %m, i32 %val) {
entry:
  %m1 = alloca [10 x i32], align 4
  store [10 x i32] %m, [10 x i32]* %m1, align 4
  %val2 = alloca i32, align 4
  store i32 %val, i32* %val2, align 4
  store i32 0, i32* @i, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  %i = load i32, i32* @i, align 4
  %tmp = icmp slt i32 %i, 10
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %val3 = load i32, i32* %val2, align 4
  %i4 = load i32, i32* @i, align 4
  %tmp5 = getelementptr [10 x i32], [10 x i32]* %m1, i32 0, i32 %i4
  store i32 %val3, i32* %tmp5, align 4
  %i6 = load i32, i32* @i, align 4
  %tmp7 = add i32 %i6, 1
  store i32 %tmp7, i32* @i, align 4
  br label %while

while_end:                                        ; preds = %while
  %m8 = load [10 x i32], [10 x i32]* %m1, align 4
  ret [10 x i32] %m8
}

define i32 @print_1d_int_10([10 x i32] %m) {
entry:
  %m1 = alloca [10 x i32], align 4
  store [10 x i32] %m, [10 x i32]* %m1, align 4
  store i32 0, i32* @i, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  %i = load i32, i32* @i, align 4
  %tmp = icmp slt i32 %i, 10
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %i2 = load i32, i32* @i, align 4
  %tmp3 = getelementptr [10 x i32], [10 x i32]* %m1, i32 0, i32 %i2
  %tmp4 = load i32, i32* %tmp3, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.4, i32 0, i32 0), i32 %tmp4)
  %i5 = load i32, i32* @i, align 4
  %tmp6 = add i32 %i5, 1
  store i32 %tmp6, i32* @i, align 4
  br label %while

while_end:                                        ; preds = %while
  ret i32 0
}

define [10 x i32] @addval_1d_int_10([10 x i32] %m, i32 %val) {
entry:
  %m1 = alloca [10 x i32], align 4
  store [10 x i32] %m, [10 x i32]* %m1, align 4
  %val2 = alloca i32, align 4
  store i32 %val, i32* %val2, align 4
  store i32 0, i32* @i, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  %i = load i32, i32* @i, align 4
  %tmp = icmp slt i32 %i, 10
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %i3 = load i32, i32* @i, align 4
  %tmp4 = getelementptr [10 x i32], [10 x i32]* %m1, i32 0, i32 %i3
  %tmp5 = load i32, i32* %tmp4, align 4
  %val6 = load i32, i32* %val2, align 4
  %tmp7 = add i32 %tmp5, %val6
  %i8 = load i32, i32* @i, align 4
  %tmp9 = getelementptr [10 x i32], [10 x i32]* %m1, i32 0, i32 %i8
  store i32 %tmp7, i32* %tmp9, align 4
  %i10 = load i32, i32* @i, align 4
  %tmp11 = add i32 %i10, 1
  store i32 %tmp11, i32* @i, align 4
  br label %while

while_end:                                        ; preds = %while
  %m12 = load [10 x i32], [10 x i32]* %m1, align 4
  ret [10 x i32] %m12
}

define i32 @add_int_int(i32 %x, i32 %y) {
entry:
  %x1 = alloca i32, align 4
  store i32 %x, i32* %x1, align 4
  %y2 = alloca i32, align 4
  store i32 %y, i32* %y2, align 4
  %x3 = load i32, i32* %x1, align 4
  %y4 = load i32, i32* %y2, align 4
  %tmp = add i32 %x3, %y4
  store i32 %tmp, i32* @j, align 4
  %j = load i32, i32* @j, align 4
  ret i32 %j
}

define [10 x i32] @addmat_1d_int_10([10 x i32] %m1, [10 x i32] %m2) {
entry:
  %m11 = alloca [10 x i32], align 4
  store [10 x i32] %m1, [10 x i32]* %m11, align 4
  %m22 = alloca [10 x i32], align 4
  store [10 x i32] %m2, [10 x i32]* %m22, align 4
  store i32 0, i32* @i, align 4
  %ii = alloca i32, align 4
  store i32 0, i32* %ii, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  %ii3 = load i32, i32* %ii, align 4
  %tmp = icmp slt i32 %ii3, 10
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %ii4 = load i32, i32* %ii, align 4
  %tmp5 = getelementptr [10 x i32], [10 x i32]* %m11, i32 0, i32 %ii4
  %tmp6 = load i32, i32* %tmp5, align 4
  store i32 %tmp6, i32* @v1, align 4
  %ii7 = load i32, i32* %ii, align 4
  %tmp8 = getelementptr [10 x i32], [10 x i32]* %m22, i32 0, i32 %ii7
  %tmp9 = load i32, i32* %tmp8, align 4
  store i32 %tmp9, i32* @v2, align 4
  %v2 = load i32, i32* @v2, align 4
  %v1 = load i32, i32* @v1, align 4
  %add_int_int_result = call i32 @add_int_int(i32 %v1, i32 %v2)
  %ii10 = load i32, i32* %ii, align 4
  %tmp11 = getelementptr [10 x i32], [10 x i32]* %m11, i32 0, i32 %ii10
  store i32 %add_int_int_result, i32* %tmp11, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.10, i32 0, i32 0), i32 12345)
  %ii12 = load i32, i32* %ii, align 4
  %tmp13 = add i32 %ii12, 1
  store i32 %tmp13, i32* %ii, align 4
  br label %while

while_end:                                        ; preds = %while
  %m114 = load [10 x i32], [10 x i32]* %m11, align 4
  ret [10 x i32] %m114
}

define [42 x i32] @init_val_2d_int_6_7([42 x i32] %m, i32 %val) {
entry:
  %m1 = alloca [42 x i32], align 4
  store [42 x i32] %m, [42 x i32]* %m1, align 4
  %val2 = alloca i32, align 4
  store i32 %val, i32* %val2, align 4
  store i32 0, i32* @i, align 4
  store i32 0, i32* @j, align 4
  br label %while

while:                                            ; preds = %if_end, %entry
  %i = load i32, i32* @i, align 4
  %tmp = icmp slt i32 %i, 5
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %i3 = load i32, i32* @i, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.12, i32 0, i32 0), i32 %i3)
  %j = load i32, i32* @j, align 4
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.12, i32 0, i32 0), i32 %j)
  %val5 = load i32, i32* %val2, align 4
  %i6 = load i32, i32* @i, align 4
  %j7 = load i32, i32* @j, align 4
  %tmp8 = getelementptr [42 x i32], [42 x i32]* %m1, i32 %i6, i32 %j7
  store i32 %val5, i32* %tmp8, align 4
  %j9 = load i32, i32* @j, align 4
  %tmp10 = add i32 %j9, 1
  store i32 %tmp10, i32* @j, align 4
  %j11 = load i32, i32* @j, align 4
  %tmp12 = icmp sgt i32 %j11, 6
  br i1 %tmp12, label %then, label %if_end

then:                                             ; preds = %while_body
  store i32 0, i32* @j, align 4
  %i13 = load i32, i32* @i, align 4
  %tmp14 = add i32 %i13, 1
  store i32 %tmp14, i32* @i, align 4
  br label %if_end

if_end:                                           ; preds = %while_body, %then
  br label %while

while_end:                                        ; preds = %while
  %m15 = load [42 x i32], [42 x i32]* %m1, align 4
  ret [42 x i32] %m15
}

define i32 @main(i32 %x) {
entry:
  %x1 = alloca i32, align 4
  store i32 %x, i32* %x1, align 4
  %tmp = alloca [10 x i32], i32 0, align 4
  %tmp2 = alloca [10 x i32], i32 0, align 4
  %mat_1d_int_10 = load [10 x i32], [10 x i32]* %tmp, align 4
  %init_val_1d_int_10_result = call [10 x i32] @init_val_1d_int_10([10 x i32] %mat_1d_int_10, i32 0)
  store [10 x i32] %init_val_1d_int_10_result, [10 x i32]* %tmp, align 4
  %mat_1d_int_103 = load [10 x i32], [10 x i32]* %tmp, align 4
  %print_1d_int_10_result = call i32 @print_1d_int_10([10 x i32] %mat_1d_int_103)
  %mat_1d_int_104 = load [10 x i32], [10 x i32]* %tmp, align 4
  %init_val_1d_int_10_result5 = call [10 x i32] @init_val_1d_int_10([10 x i32] %mat_1d_int_104, i32 123)
  store [10 x i32] %init_val_1d_int_10_result5, [10 x i32]* %tmp, align 4
  %mat_1d_int_106 = load [10 x i32], [10 x i32]* %tmp, align 4
  %addval_1d_int_10_result = call [10 x i32] @addval_1d_int_10([10 x i32] %mat_1d_int_106, i32 -123)
  store [10 x i32] %addval_1d_int_10_result, [10 x i32]* %tmp, align 4
  %mat2_1d_int_10 = load [10 x i32], [10 x i32]* %tmp2, align 4
  %init_val_1d_int_10_result7 = call [10 x i32] @init_val_1d_int_10([10 x i32] %mat2_1d_int_10, i32 12)
  store [10 x i32] %init_val_1d_int_10_result7, [10 x i32]* %tmp2, align 4
  %mat2_1d_int_108 = load [10 x i32], [10 x i32]* %tmp2, align 4
  %mat_1d_int_109 = load [10 x i32], [10 x i32]* %tmp, align 4
  %addmat_1d_int_10_result = call [10 x i32] @addmat_1d_int_10([10 x i32] %mat_1d_int_109, [10 x i32] %mat2_1d_int_108)
  store [10 x i32] %addmat_1d_int_10_result, [10 x i32]* %tmp, align 4
  %mat_1d_int_1010 = load [10 x i32], [10 x i32]* %tmp, align 4
  %print_1d_int_10_result11 = call i32 @print_1d_int_10([10 x i32] %mat_1d_int_1010)
  ret i32 0
}
