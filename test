#!/bin/bash

################################
# define color constants
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[1;34m'
BOLD='\033[1m'
NC='\033[0m'
# getops
let flag_clean=0
let flag_parse=0
let flag_semant=0
while getopts 'cpsa' flag; do
  case "${flag}" in
    c) let flag_clean=1;;
    p) let flag_parse=1;;
    s) let flag_semant=1;;
    a) let flag_parse=1;
       let flag_semant=1;;
    *) echo -e ${RED}"ILLEGAL OPTION: only -c -p -s -a are allowed"${NC}; 
       exit 1;;
  esac
done
if [ ${flag_clean} -ne 0 ]; then
  echo "Clean flag enabled: clean temp folder after testing"
fi
if [ ${flag_parse} -eq 0 ] && [ ${flag_semant} -eq 0 ]; then
  let flag_parse=1
  let flag_semant=1
  echo "DEFAULT All flag enabled: test all cases"
else
  if [ ${flag_parse} -ne 0 ]; then
    echo "Parse flag enabled: test cases for parse phase"
  fi
  if [ ${flag_semant} -ne 0 ]; then
    echo "Semant flag enabled: test cases for semantics phase"
  fi
fi

# initialize report numbers
let parse_passed_number=0
let parse_failed_number=0
let semant_passed_number=0
let semant_failed_number=0
################################

############### TEST PARSE #################
if [ ${flag_parse} -eq 1 ]; then
  echo -e ${BLUE}'######### PARSE TEST #########'${NC}

  # build test_parse.native executable
  echo '-- Build .native executable --'
  ocamlbuild test_parse.native

  # check if the executable exists
  if [ -f './test_parse.native' ]; then
    echo -e ${GREEN}'ocamlbuild test_parse.native successfully'${NC}
  else
    echo -e ${RED}'ocamlbuild failed, please check error messages\n'${NC}
    exit 1
  fi

  # test each test file in test folder
  for file in ./test_cases/parse/*.mc
  do
    ./test_parse.native < $file > ${file%.mc}.ans 2>&1
  done

  # move all test answer files and expected out files into a temporary folder
  rm -r ./test_cases/parse/temp*
  mkdir ./test_cases/parse/temp
  cp ./test_cases/parse/*.ans ./test_cases/parse/temp
  cp ./test_cases/parse/*.out ./test_cases/parse/temp
  rm ./test_cases/parse/*.ans
  echo 'Completed running all /test_cases/parse'
  echo '-----------------------------'

  # compare result and out file one by one
  for file in ./test_cases/parse/temp/*.out
  do
    # check stdout
    diff $file ${file%.out}.ans
    if [ $? -eq 0 ]
    then
      echo -e ${GREEN}${file##*/}' passed'${NC}
      let parse_passed_number++
    else
      echo -e ${RED}${file##*/}' failed'${NC}
      let parse_failed_number++
    fi
  done

  # remove test_parse.native executable file
  rm test_parse.native
  # clean temp folder
  if [ ${flag_clean} -ne 0 ]; then
    rm -r ./test_cases/parse/temp
  fi

  echo -e ${BLUE}'######### DONE PARSE TEST #########\n'${NC}
fi
############### DONE TEST PARSE #################

############### TEST SEMANT #################
if [ ${flag_semant} -eq 1 ]; then
  echo -e ${BLUE}'######### SEMANT TEST #########'${NC}

  # build test_semant.native executable
  echo '-- Build .native executable --'
  ocamlbuild test_semant.native

  # check if the executable exists
  if [ -f './test_semant.native' ]; then
    echo -e ${GREEN}'ocamlbuild test_semant.native successfully'${NC}
  else
    echo -e ${RED}'ocamlbuild failed, please check error messages\n'${NC}
    exit 1
  fi

  # test each test file in test folder
  for file in ./test_cases/semant/*.mc
  do
    ./test_semant.native < $file > ${file%.mc}.ans 2>&1
  done

  # move all test answer files and expected out files into a temporary folder
  rm -r ./test_cases/semant/temp*
  mkdir ./test_cases/semant/temp
  cp ./test_cases/semant/*.ans ./test_cases/semant/temp
  cp ./test_cases/semant/*.out ./test_cases/semant/temp
  rm ./test_cases/semant/*.ans
  echo 'Completed running all /test_cases/semant'
  echo '-----------------------------'

  # compare result and out file one by one
  for file in ./test_cases/semant/temp/*.out
  do
    # check stdout
    diff $file ${file%.out}.ans
    if [ $? -eq 0 ]
    then
      echo -e ${GREEN}${file##*/}' passed'${NC}
      let semant_passed_number++
    else
      echo -e ${RED}${file##*/}' failed'${NC}
      let semant_failed_number++
    fi
  done

  # remove test_semant.native executable file
  rm test_semant.native
  # clean temp folder
  if [ ${flag_clean} -ne 0 ]; then
    rm -r ./test_cases/semant/temp
  fi

  echo -e ${BLUE}'######### DONE SEMANT TEST #########\n'${NC}
fi
############### DONE TEST SEMANT #################

# print final result
let passed_number=$((parse_passed_number + semant_passed_number))
let failed_number=$((parse_failed_number + semant_failed_number))
echo -e "\n${BOLD}TEST REPORT${NC}\n"
echo -e "passed : ${GREEN}"${passed_number}"${NC} test(s)"
echo -e "failed : ${RED}"${failed_number}"${NC} test(s)"
if [ ${flag_parse} -eq 1 ]; then
  echo '-----------------------------'
  echo -e "> parse passed: ${GREEN}"${parse_passed_number}"${NC} test(s)"
  echo -e "> parse failed: ${RED}"${parse_failed_number}"${NC} test(s)"
fi
if [ ${flag_semant} -eq 1 ]; then
  echo '-----------------------------'
  echo -e "> semant passed: ${GREEN}"${semant_passed_number}"${NC} test(s)"
  echo -e "> semant failed: ${RED}"${semant_failed_number}"${NC} test(s)"
fi