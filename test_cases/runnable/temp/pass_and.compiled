; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.7 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i32 @printf(i8*, ...)

define i1 @main() {
entry:
  %main1_result = call i1 @main1()
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %main1_result)
  %main2_result = call i1 @main2()
  %printf1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %main2_result)
  %main3_result = call i1 @main3()
  %printf2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i1 %main3_result)
  ret i1 true
}

define i1 @main1() {
entry:
  %a = alloca i1
  store i1 true, i1* %a
  %b = alloca i1
  store i1 false, i1* %b
  %a1 = load i1, i1* %a
  %b2 = load i1, i1* %b
  %tmp = and i1 %a1, %b2
  ret i1 %tmp
}

define i1 @main2() {
entry:
  %a = alloca i1
  store i1 true, i1* %a
  %b = alloca i1
  store i1 true, i1* %b
  %a1 = load i1, i1* %a
  %b2 = load i1, i1* %b
  %tmp = and i1 %a1, %b2
  ret i1 %tmp
}

define i1 @main3() {
entry:
  %a = alloca i1
  store i1 false, i1* %a
  %b = alloca i1
  store i1 false, i1* %b
  %a1 = load i1, i1* %a
  %b2 = load i1, i1* %b
  %tmp = and i1 %a1, %b2
  ret i1 %tmp
}
