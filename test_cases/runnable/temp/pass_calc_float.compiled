; ModuleID = 'MicroC'
source_filename = "MicroC"

@c = global double 0.000000e+00
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.7 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.8 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.9 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.11 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.12 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.13 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.14 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.15 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.16 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.17 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.18 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.19 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.20 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.21 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.22 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.23 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.24 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.25 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %main1_result = call double @main1()
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main1_result)
  %main1_2_result = call double @main1_2()
  %printf1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main1_2_result)
  %main2_result = call double @main2()
  %printf2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main2_result)
  %main2_2_result = call double @main2_2()
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main2_2_result)
  %main2_3_result = call double @main2_3()
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main2_3_result)
  %main3_result = call double @main3()
  %printf5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main3_result)
  %main3_2_result = call double @main3_2()
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main3_2_result)
  %main3_3_result = call double @main3_3()
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main3_3_result)
  %main4_result = call double @main4()
  %printf8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main4_result)
  %main4_2_result = call double @main4_2()
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main4_2_result)
  %main4_3_result = call double @main4_3()
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), double %main4_3_result)
  ret i32 0
}

define double @main1() {
entry:
  %a = alloca double
  store double 1.234500e+02, double* %a
  %b = alloca double
  store double 0x4085373333333333, double* %b
  %a1 = load double, double* %a
  %b2 = load double, double* %b
  %tmp = fadd double %a1, %b2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}

define double @main1_2() {
entry:
  %a = alloca double
  store double -1.230000e+02, double* %a
  %b = alloca double
  store double -4.560000e+02, double* %b
  %a1 = load double, double* %a
  %b2 = load double, double* %b
  %tmp = fadd double %a1, %b2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}

define double @main2() {
entry:
  %a = alloca double
  store double 1.230000e+02, double* %a
  %b = alloca double
  store double 4.560000e+02, double* %b
  %b1 = load double, double* %b
  %a2 = load double, double* %a
  %tmp = fsub double %b1, %a2
  ret double %tmp
}

define double @main2_2() {
entry:
  %a = alloca double
  store double 1.230000e+02, double* %a
  %b = alloca double
  store double -4.560000e+02, double* %b
  %b1 = load double, double* %b
  %a2 = load double, double* %a
  %tmp = fsub double %b1, %a2
  ret double %tmp
}

define double @main2_3() {
entry:
  %a = alloca double
  store double -1.230000e+02, double* %a
  %b = alloca double
  store double -4.560000e+02, double* %b
  %b1 = load double, double* %b
  %a2 = load double, double* %a
  %tmp = fsub double %b1, %a2
  ret double %tmp
}

define double @main3() {
entry:
  %a = alloca double
  store double 1.230000e+02, double* %a
  %b = alloca double
  store double 4.560000e+02, double* %b
  %a1 = load double, double* %a
  %b2 = load double, double* %b
  %tmp = fmul double %a1, %b2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}

define double @main3_2() {
entry:
  %a = alloca double
  store double -1.230000e+02, double* %a
  %b = alloca double
  store double 4.560000e+02, double* %b
  %a1 = load double, double* %a
  %b2 = load double, double* %b
  %tmp = fmul double %a1, %b2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}

define double @main3_3() {
entry:
  %a = alloca double
  store double -1.230000e+02, double* %a
  %b = alloca double
  store double -4.560000e+02, double* %b
  %a1 = load double, double* %a
  %b2 = load double, double* %b
  %tmp = fmul double %a1, %b2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}

define double @main4() {
entry:
  %a = alloca double
  store double 1.230000e+02, double* %a
  %b = alloca double
  store double 4.560000e+02, double* %b
  %b1 = load double, double* %b
  %a2 = load double, double* %a
  %tmp = fdiv double %b1, %a2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}

define double @main4_1() {
entry:
  %a = alloca double
  store double 1.230000e+02, double* %a
  %b = alloca double
  store double 4.560000e+02, double* %b
  %a1 = load double, double* %a
  %b2 = load double, double* %b
  %tmp = fdiv double %a1, %b2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}

define double @main4_2() {
entry:
  %a = alloca double
  store double 1.230000e+02, double* %a
  %b = alloca double
  store double -4.560000e+02, double* %b
  %b1 = load double, double* %b
  %a2 = load double, double* %a
  %tmp = fdiv double %b1, %a2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}

define double @main4_3() {
entry:
  %a = alloca double
  store double -1.230000e+02, double* %a
  %b = alloca double
  store double -4.560000e+02, double* %b
  %b1 = load double, double* %b
  %a2 = load double, double* %a
  %tmp = fdiv double %b1, %a2
  store double %tmp, double* @c
  %c = load double, double* @c
  ret double %c
}
