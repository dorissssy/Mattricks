; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %tmp = alloca [2 x i32], i32 0
  %tmp1 = getelementptr [2 x i32], [2 x i32]* %tmp, i32 0, i32 0
  store i32 123, i32* %tmp1
  %tmp2 = getelementptr [2 x i32], [2 x i32]* %tmp, i32 0, i32 0
  %tmp3 = load i32, i32* %tmp2
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %tmp3)
  %tmp4 = alloca [2 x i32], i32 0
  %tmp5 = getelementptr [2 x i32], [2 x i32]* %tmp4, i32 0, i32 0
  store i32 321, i32* %tmp5
  %tmp6 = getelementptr [2 x i32], [2 x i32]* %tmp4, i32 0, i32 0
  %tmp7 = load i32, i32* %tmp6
  %printf8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %tmp7)
  %tmp9 = alloca [2 x i32], i32 0
  %tmp10 = getelementptr [2 x i32], [2 x i32]* %tmp, i32 0, i32 0
  %tmp11 = load i32, i32* %tmp10
  %tmp12 = getelementptr [2 x i32], [2 x i32]* %tmp4, i32 0, i32 0
  %tmp13 = load i32, i32* %tmp12
  %tmp14 = add i32 %tmp11, %tmp13
  %tmp15 = getelementptr [2 x i32], [2 x i32]* %tmp9, i32 0, i32 0
  store i32 %tmp14, i32* %tmp15
  %tmp16 = getelementptr [2 x i32], [2 x i32]* %tmp9, i32 0, i32 0
  %tmp17 = load i32, i32* %tmp16
  %printf18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %tmp17)
  ret i32 0
}
