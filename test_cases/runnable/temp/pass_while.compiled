; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %i = alloca i32
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %while_body, %entry
  %i1 = load i32, i32* %i
  %tmp = icmp slt i32 %i1, 5
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %i2 = load i32, i32* %i
  %tmp3 = add i32 %i2, 1
  store i32 %tmp3, i32* %i
  br label %while

while_end:                                        ; preds = %while
  %i4 = load i32, i32* %i
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %i4)
  %main2_result = call i32 @main2()
  %printf5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %main2_result)
  %i6 = load i32, i32* %i
  ret i32 %i6
}

define i32 @main2() {
entry:
  %i = alloca i32
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %while_body, %entry
  %i1 = load i32, i32* %i
  %tmp = icmp sle i32 %i1, 5
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %i2 = load i32, i32* %i
  %tmp3 = add i32 %i2, 1
  store i32 %tmp3, i32* %i
  br label %while

while_end:                                        ; preds = %while
  %i4 = load i32, i32* %i
  ret i32 %i4
}
